---
title: "Data Munging blm-aim Test"
format:
  html:
    #code-fold: show
    code-tools: true
    highlight-style: github
    code-block-style: default
    code-block-border-left: "#31BAE9"
    code-block-bg: true
    code-line-numbers: true
    code-copy: true
    code-link: false
    code-annotations: hover
    include-in-header:
      text: |
        <style>
        .cell-code {
          position: relative;
        }
        .cell-code::before {
          content: "Python";
          position: absolute;
          top: 0;
          right: 45px;  /* Moved left to avoid copy button */
          background: #31BAE9;
          color: white;
          padding: 2px 12px;
          font-size: 0.8em;
          border-radius: 0 0 12px 12px;  /* Made bottom corners more rounded */
          z-index: 10;
        }
        </style>
jupyter: false
execute:
  eval: false
  echo: true
---

## Import Modules and Define Functions

```{python}
import pandas as pd
import numpy as np

def inspect_dataframe(df):
    """
    This function takes a pandas DataFrame as input
    and prints various attributes to inspect its structure.
    """
    print("DataFrame Preview:")
    print(df.head())        # Display the first few rows
    print("\nShape of the DataFrame:")
    print(df.shape)        # Print the shape of the DataFrame
    print("\nColumn Names:")
    print(df.columns)      # Print the column names
    print("\nDataFrame Info:")
    print(df.info())       # Print a summary of the DataFrame
    print("\nData Types of Each Column:")
    print(df.dtypes)       # Print the data types of each column
    
def check_duplicates_full(df):
    duplicates_full = df.duplicated() # check for full duplicate records 
    print("Number of duplicate rows in the entire DataFrame:", duplicates_full.sum()) # Print the number of duplicate rows
    print("\nDuplicate rows:")
    print(df[duplicates_full]) # print the contents of the duplicate rows
    
def check_duplicates_col(df,col):
    duplicates_column = df[col].duplicated()
    print("Number of duplicate entries in 'column_name':", duplicates_column.sum()) # Print the number of duplicate entries in the specified column
    print("\nRows with duplicate entries in 'column_name':")
    print(df[duplicates_column]) # display rows with duplicates in that column
```

## Load in files and initiate no data checks

```{python}
# List of CSV files and their corresponding variable names
file_info = [
    ('SoilExport_02_Sites_20230420.csv', 'blm_aim_sites'),
    ('SoilExport_03_SiteVisits_20230420.csv', 'blm_aim_sitevisits'),
    ('SoilExport_12_Environment_20230420.csv', 'blm_aim_environment'),
    ('SoilExport_13_SoilMetrics_20230420.csv', 'blm_aim_soilmetrics'),
    ('SoilExport_14_SoilHorizons_20230420.csv', 'blm_aim_soilhorizons')
]

# Dictionary to store the DataFrames
dataframes = {}

# Read the CSV files into DataFrames
for file_name, var_name in file_info:
    df = pd.read_csv(file_name, na_values=['NA', 'No Data', 'Not Available'])
    dataframes[var_name] = df

# Function to process numeric columns and handle missing values
def process_numeric_columns(df):
    for column in df.columns:
        # Check if the column is of type 'object'
        if df[column].dtype == 'object':
            # Ensure we only apply the str methods if the column is indeed a string type
            if df[column].apply(lambda x: isinstance(x, str)).all() and df[column].str.len().max() <= 20:
                # Attempt to convert to numeric
                df[column] = pd.to_numeric(df[column], errors='coerce')
        
        # Replace -999 and -999.0 with NaN for numeric columns
        if pd.api.types.is_numeric_dtype(df[column]):
            df[column].replace({-999: np.nan, -999.0: np.nan}, inplace=True)

# Function to identify potential numeric columns
def identify_potential_numeric_columns(df):
    potential_numeric_cols = []
    for column in df.columns:
        if df[column].dtype == 'object':
            # Check if the column can be converted to numeric
            if df[column].apply(lambda x: isinstance(x, str) and x.isnumeric()).all():
                potential_numeric_cols.append(column)
    return potential_numeric_cols

# Process each DataFrame
for var_name, df in dataframes.items():
    process_numeric_columns(df)
    potential_numeric_columns = identify_potential_numeric_columns(df)
    
    # Display the results for each DataFrame
    print(f"\nPotential Numeric Columns in {var_name}:", potential_numeric_columns)
    print(df.info())

# Access individual DataFrames as needed
blm_aim_sites = dataframes['blm_aim_sites']
blm_aim_sitevisits = dataframes['blm_aim_sitevisits']
blm_aim_environment = dataframes['blm_aim_environment']
blm_aim_soilmetrics = dataframes['blm_aim_soilmetrics']
blm_aim_soilhorizons = dataframes['blm_aim_soilhorizons']
```

<details>

<summary>Click to expand output</summary>

```         
Potential Numeric Columns in blm_aim_sites: []
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 290 entries, 0 to 289
Data columns (total 11 columns):
 #   Column                     Non-Null Count  Dtype  
---  ------                     --------------  -----  
 0   site_code                  0 non-null      float64
 1   establishing_project_code  0 non-null      float64
 2   perspective                0 non-null      float64
 3   cover_method               290 non-null    object 
 4   h_datum                    0 non-null      float64
 5   latitude_dd                290 non-null    float64
 6   longitude_dd               290 non-null    float64
 7   h_error_m                  290 non-null    float64
 8   positional_accuracy        0 non-null      float64
 9   plot_dimensions_m          0 non-null      float64
 10  location_type              0 non-null      float64
dtypes: float64(10), object(1)
memory usage: 25.0+ KB
None

Potential Numeric Columns in blm_aim_sitevisits: []
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 290 entries, 0 to 289
Data columns (total 14 columns):
 #   Column            Non-Null Count  Dtype  
---  ------            --------------  -----  
 0   site_visit_code   0 non-null      float64
 1   project_code      0 non-null      float64
 2   site_code         0 non-null      float64
 3   data_tier         290 non-null    object 
 4   observe_date      0 non-null      float64
 5   veg_observer      0 non-null      float64
 6   veg_recorder      193 non-null    object 
 7   env_observer      0 non-null      float64
 8   soils_observer    0 non-null      float64
 9   structural_class  0 non-null      float64
 10  scope_vascular    0 non-null      float64
 11  scope_bryophyte   0 non-null      float64
 12  scope_lichen      0 non-null      float64
 13  homogenous        290 non-null    bool   
dtypes: bool(1), float64(11), object(2)
memory usage: 29.9+ KB
None

Potential Numeric Columns in blm_aim_environment: []
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 290 entries, 0 to 289
Data columns (total 22 columns):
 #   Column                                Non-Null Count  Dtype  
---  ------                                --------------  -----  
 0   project_code                          0 non-null      float64
 1   site_code                             0 non-null      float64
 2   site_visit_code                       0 non-null      float64
 3   physiography                          224 non-null    object 
 4   geomorphology                         236 non-null    object 
 5   macrotopography                       247 non-null    object 
 6   microtopography                       132 non-null    object 
 7   moisture_regime                       246 non-null    object 
 8   drainage                              153 non-null    object 
 9   disturbance                           200 non-null    object 
 10  disturbance_severity                  11 non-null     object 
 11  disturbance_time_y                    11 non-null     float64
 12  depth_water_cm                        159 non-null    float64
 13  depth_moss_duff_cm                    272 non-null    float64
 14  depth_restrictive_layer_cm            255 non-null    float64
 15  restrictive_type                      236 non-null    object 
 16  microrelief_cm                        12 non-null     float64
 17  surface_water                         109 non-null    object 
 18  soil_class                            0 non-null      float64
 19  cryoturbation                         287 non-null    object 
 20  dominant_texture_40_cm                109 non-null    object 
 21  depth_15_percent_coarse_fragments_cm  31 non-null     float64
dtypes: float64(10), object(12)
memory usage: 50.0+ KB
None

Potential Numeric Columns in blm_aim_soilmetrics: []
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 563 entries, 0 to 562
Data columns (total 8 columns):
 #   Column             Non-Null Count  Dtype  
---  ------             --------------  -----  
 0   project_code       0 non-null      float64
 1   site_code          0 non-null      float64
 2   site_visit_code    0 non-null      float64
 3   water_measurement  563 non-null    bool   
 4   measure_depth_cm   563 non-null    float64
 5   ph                 555 non-null    float64
 6   conductivity_mus   315 non-null    float64
 7   temperature_deg_c  46 non-null     float64
dtypes: bool(1), float64(7)
memory usage: 31.5 KB
None

Potential Numeric Columns in blm_aim_soilhorizons: []
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 844 entries, 0 to 843
Data columns (total 29 columns):
 #   Column                         Non-Null Count  Dtype  
---  ------                         --------------  -----  
 0   project_code                   0 non-null      float64
 1   site_code                      0 non-null      float64
 2   site_visit_code                0 non-null      float64
 3   horizon_order                  844 non-null    int64  
 4   thickness_cm                   707 non-null    float64
 5   depth_upper_cm                 843 non-null    float64
 6   depth_lower_cm                 843 non-null    float64
 7   depth_extend                   844 non-null    bool   
 8   horizon_primary_code           0 non-null      float64
 9   horizon_suffix_1               566 non-null    object 
 10  horizon_suffix_2               66 non-null     object 
 11  horizon_secondary_code         14 non-null     object 
 12  horizon_suffix_3               3 non-null      object 
 13  horizon_suffix_4               1 non-null      object 
 14  texture                        411 non-null    object 
 15  clay_percent                   91 non-null     float64
 16  total_coarse_fragment_percent  651 non-null    float64
 17  gravel_percent                 613 non-null    float64
 18  cobble_percent                 613 non-null    float64
 19  stone_percent                  613 non-null    float64
 20  boulder_percent                613 non-null    float64
 21  structure                      85 non-null     object 
 22  matrix_hue_code                514 non-null    object 
 23  matrix_value                   514 non-null    float64
 24  matrix_chroma                  514 non-null    float64
 25  nonmatrix_feature              49 non-null     object 
 26  nonmatrix_hue_code             18 non-null     object 
 27  nonmatrix_value                18 non-null     float64
 28  nonmatrix_chroma               18 non-null     float64
dtypes: bool(1), float64(17), int64(1), object(10)
memory usage: 185.6+ KB
None
```

</details>
