[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "_data_munging_scripts",
    "section": "",
    "text": "Preface\nThis quarto book contains a series of scripts and documentation for dataset-specific data munging procedures for the AKSDB project.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#msi-websites",
    "href": "index.html#msi-websites",
    "title": "_data_munging_scripts",
    "section": "MSI Websites",
    "text": "MSI Websites",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "blm-aim-datamunging-test.html",
    "href": "blm-aim-datamunging-test.html",
    "title": "1  Data Munging blm-aim Test",
    "section": "",
    "text": "1.1 Import Modules and Define Functions\nimport pandas as pd\nimport numpy as np\n\ndef inspect_dataframe(df):\n    \"\"\"\n    This function takes a pandas DataFrame as input\n    and prints various attributes to inspect its structure.\n    \"\"\"\n    print(\"DataFrame Preview:\")\n    print(df.head())        # Display the first few rows\n    print(\"\\nShape of the DataFrame:\")\n    print(df.shape)        # Print the shape of the DataFrame\n    print(\"\\nColumn Names:\")\n    print(df.columns)      # Print the column names\n    print(\"\\nDataFrame Info:\")\n    print(df.info())       # Print a summary of the DataFrame\n    print(\"\\nData Types of Each Column:\")\n    print(df.dtypes)       # Print the data types of each column\n    \ndef check_duplicates_full(df):\n    duplicates_full = df.duplicated() # check for full duplicate records \n    print(\"Number of duplicate rows in the entire DataFrame:\", duplicates_full.sum()) # Print the number of duplicate rows\n    print(\"\\nDuplicate rows:\")\n    print(df[duplicates_full]) # print the contents of the duplicate rows\n    \ndef check_duplicates_col(df,col):\n    duplicates_column = df[col].duplicated()\n    print(\"Number of duplicate entries in 'column_name':\", duplicates_column.sum()) # Print the number of duplicate entries in the specified column\n    print(\"\\nRows with duplicate entries in 'column_name':\")\n    print(df[duplicates_column]) # display rows with duplicates in that column",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Munging blm-aim Test</span>"
    ]
  },
  {
    "objectID": "blm-aim-datamunging-test.html#load-in-files-and-initiate-no-data-checks",
    "href": "blm-aim-datamunging-test.html#load-in-files-and-initiate-no-data-checks",
    "title": "1  Data Munging blm-aim Test",
    "section": "1.2 Load in files and initiate no data checks",
    "text": "1.2 Load in files and initiate no data checks\n\n# List of CSV files and their corresponding variable names\nfile_info = [\n    ('SoilExport_02_Sites_20230420.csv', 'blm_aim_sites'),\n    ('SoilExport_03_SiteVisits_20230420.csv', 'blm_aim_sitevisits'),\n    ('SoilExport_12_Environment_20230420.csv', 'blm_aim_environment'),\n    ('SoilExport_13_SoilMetrics_20230420.csv', 'blm_aim_soilmetrics'),\n    ('SoilExport_14_SoilHorizons_20230420.csv', 'blm_aim_soilhorizons')\n]\n\n# Dictionary to store the DataFrames\ndataframes = {}\n\n# Read the CSV files into DataFrames\nfor file_name, var_name in file_info:\n    df = pd.read_csv(file_name, na_values=['NA', 'No Data', 'Not Available'])\n    dataframes[var_name] = df\n\n# Function to process numeric columns and handle missing values\ndef process_numeric_columns(df):\n    for column in df.columns:\n        # Check if the column is of type 'object'\n        if df[column].dtype == 'object':\n            # Ensure we only apply the str methods if the column is indeed a string type\n            if df[column].apply(lambda x: isinstance(x, str)).all() and df[column].str.len().max() &lt;= 20:\n                # Attempt to convert to numeric\n                df[column] = pd.to_numeric(df[column], errors='coerce')\n        \n        # Replace -999 and -999.0 with NaN for numeric columns\n        if pd.api.types.is_numeric_dtype(df[column]):\n            df[column].replace({-999: np.nan, -999.0: np.nan}, inplace=True)\n\n# Function to identify potential numeric columns\ndef identify_potential_numeric_columns(df):\n    potential_numeric_cols = []\n    for column in df.columns:\n        if df[column].dtype == 'object':\n            # Check if the column can be converted to numeric\n            if df[column].apply(lambda x: isinstance(x, str) and x.isnumeric()).all():\n                potential_numeric_cols.append(column)\n    return potential_numeric_cols\n\n# Process each DataFrame\nfor var_name, df in dataframes.items():\n    process_numeric_columns(df)\n    potential_numeric_columns = identify_potential_numeric_columns(df)\n    \n    # Display the results for each DataFrame\n    print(f\"\\nPotential Numeric Columns in {var_name}:\", potential_numeric_columns)\n    print(df.info())\n\n# Access individual DataFrames as needed\nblm_aim_sites = dataframes['blm_aim_sites']\nblm_aim_sitevisits = dataframes['blm_aim_sitevisits']\nblm_aim_environment = dataframes['blm_aim_environment']\nblm_aim_soilmetrics = dataframes['blm_aim_soilmetrics']\nblm_aim_soilhorizons = dataframes['blm_aim_soilhorizons']\n\n\n\nClick to expand output\n\nPotential Numeric Columns in blm_aim_sites: []\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 290 entries, 0 to 289\nData columns (total 11 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   site_code                  0 non-null      float64\n 1   establishing_project_code  0 non-null      float64\n 2   perspective                0 non-null      float64\n 3   cover_method               290 non-null    object \n 4   h_datum                    0 non-null      float64\n 5   latitude_dd                290 non-null    float64\n 6   longitude_dd               290 non-null    float64\n 7   h_error_m                  290 non-null    float64\n 8   positional_accuracy        0 non-null      float64\n 9   plot_dimensions_m          0 non-null      float64\n 10  location_type              0 non-null      float64\ndtypes: float64(10), object(1)\nmemory usage: 25.0+ KB\nNone\n\nPotential Numeric Columns in blm_aim_sitevisits: []\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 290 entries, 0 to 289\nData columns (total 14 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   site_visit_code   0 non-null      float64\n 1   project_code      0 non-null      float64\n 2   site_code         0 non-null      float64\n 3   data_tier         290 non-null    object \n 4   observe_date      0 non-null      float64\n 5   veg_observer      0 non-null      float64\n 6   veg_recorder      193 non-null    object \n 7   env_observer      0 non-null      float64\n 8   soils_observer    0 non-null      float64\n 9   structural_class  0 non-null      float64\n 10  scope_vascular    0 non-null      float64\n 11  scope_bryophyte   0 non-null      float64\n 12  scope_lichen      0 non-null      float64\n 13  homogenous        290 non-null    bool   \ndtypes: bool(1), float64(11), object(2)\nmemory usage: 29.9+ KB\nNone\n\nPotential Numeric Columns in blm_aim_environment: []\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 290 entries, 0 to 289\nData columns (total 22 columns):\n #   Column                                Non-Null Count  Dtype  \n---  ------                                --------------  -----  \n 0   project_code                          0 non-null      float64\n 1   site_code                             0 non-null      float64\n 2   site_visit_code                       0 non-null      float64\n 3   physiography                          224 non-null    object \n 4   geomorphology                         236 non-null    object \n 5   macrotopography                       247 non-null    object \n 6   microtopography                       132 non-null    object \n 7   moisture_regime                       246 non-null    object \n 8   drainage                              153 non-null    object \n 9   disturbance                           200 non-null    object \n 10  disturbance_severity                  11 non-null     object \n 11  disturbance_time_y                    11 non-null     float64\n 12  depth_water_cm                        159 non-null    float64\n 13  depth_moss_duff_cm                    272 non-null    float64\n 14  depth_restrictive_layer_cm            255 non-null    float64\n 15  restrictive_type                      236 non-null    object \n 16  microrelief_cm                        12 non-null     float64\n 17  surface_water                         109 non-null    object \n 18  soil_class                            0 non-null      float64\n 19  cryoturbation                         287 non-null    object \n 20  dominant_texture_40_cm                109 non-null    object \n 21  depth_15_percent_coarse_fragments_cm  31 non-null     float64\ndtypes: float64(10), object(12)\nmemory usage: 50.0+ KB\nNone\n\nPotential Numeric Columns in blm_aim_soilmetrics: []\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 563 entries, 0 to 562\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   project_code       0 non-null      float64\n 1   site_code          0 non-null      float64\n 2   site_visit_code    0 non-null      float64\n 3   water_measurement  563 non-null    bool   \n 4   measure_depth_cm   563 non-null    float64\n 5   ph                 555 non-null    float64\n 6   conductivity_mus   315 non-null    float64\n 7   temperature_deg_c  46 non-null     float64\ndtypes: bool(1), float64(7)\nmemory usage: 31.5 KB\nNone\n\nPotential Numeric Columns in blm_aim_soilhorizons: []\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 844 entries, 0 to 843\nData columns (total 29 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   project_code                   0 non-null      float64\n 1   site_code                      0 non-null      float64\n 2   site_visit_code                0 non-null      float64\n 3   horizon_order                  844 non-null    int64  \n 4   thickness_cm                   707 non-null    float64\n 5   depth_upper_cm                 843 non-null    float64\n 6   depth_lower_cm                 843 non-null    float64\n 7   depth_extend                   844 non-null    bool   \n 8   horizon_primary_code           0 non-null      float64\n 9   horizon_suffix_1               566 non-null    object \n 10  horizon_suffix_2               66 non-null     object \n 11  horizon_secondary_code         14 non-null     object \n 12  horizon_suffix_3               3 non-null      object \n 13  horizon_suffix_4               1 non-null      object \n 14  texture                        411 non-null    object \n 15  clay_percent                   91 non-null     float64\n 16  total_coarse_fragment_percent  651 non-null    float64\n 17  gravel_percent                 613 non-null    float64\n 18  cobble_percent                 613 non-null    float64\n 19  stone_percent                  613 non-null    float64\n 20  boulder_percent                613 non-null    float64\n 21  structure                      85 non-null     object \n 22  matrix_hue_code                514 non-null    object \n 23  matrix_value                   514 non-null    float64\n 24  matrix_chroma                  514 non-null    float64\n 25  nonmatrix_feature              49 non-null     object \n 26  nonmatrix_hue_code             18 non-null     object \n 27  nonmatrix_value                18 non-null     float64\n 28  nonmatrix_chroma               18 non-null     float64\ndtypes: bool(1), float64(17), int64(1), object(10)\nmemory usage: 185.6+ KB\nNone",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Munging blm-aim Test</span>"
    ]
  }
]